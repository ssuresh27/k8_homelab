users:
  - default
  - name: ubuntu
    sudo: ALL=(ALL) NOPASSWD:ALL
    ssh_authorized_keys:
    - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIILzMYJwNJ90Hw6d8CKCpG+5miyXeB8lj6VBnz8Dqc81 ubuntu
    # ssh_keys:
    #   rsa_private: |
    #     -----BEGIN OPENSSH PRIVATE KEY-----
    #     b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW
    #     QyNTUxOQAAACCLX1jkz4KFdqLMfr2w4eJU0pEdWqNkOdxIt3Cev0O/agAAAJCOcM2HjnDN
    #     hwAAAAtzc2gtZWQyNTUxOQAAACCLX1jkz4KFdqLMfr2w4eJU0pEdWqNkOdxIt3Cev0O/ag
    #     AAAEC1k4JeYDEK6ET6YfE6kaamdZJRioLI3E3zsmBlHqkYLYtfWOTPgoV2osx+vbDh4lTS
    #     kR1ao2Q53Ei3cJ6/Q79qAAAABnVidW50dQECAwQFBgc=
    #     -----END OPENSSH PRIVATE KEY-----
    #   rsa_public: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIItfWOTPgoV2osx+vbDh4lTSkR1ao2Q53Ei3cJ6/Q79q ubuntu
packages:
  - openssl
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg
  - lsb-release
  - net-tools
  - nfs-common
  - socat
  - gpg

write_files:
# should ensure net.bridge.bridge-nf-call-iptables is set to 1 in your sysctl config
- content: |
    br_netfilter
    overlay
  path: /etc/modules-load.d/k8s.conf
- content: |
    net.bridge.bridge-nf-call-ip6tables = 1
    net.bridge.bridge-nf-call-iptables = 1
    net.ipv4.ip_forward = 1
  path: /etc/sysctl.d/k8s.conf

# - content: |
#     #!/bin/bash
#     echo 127.0.0.1 localhost >> /etc/hosts
#     echo 169.254.124.111 conrol01 >> /etc/hosts
#     echo 169.254.124.112 conrol02 >> /etc/hosts
#     echo 169.254.124.201 worker01 >> /etc/hosts
#     echo 169.254.124.202 worker02 >> /etc/hosts
#     echo 169.254.124.203 worker03 >> /etc/hosts
#     echo 169.254.124.204 worker04 >> /etc/hosts
#     echo 169.254.124.205 worker05 >> /etc/hosts
#     echo 169.254.124.199 nfsserver >> /etc/hosts
#     echo 'Script executed successfully!' >> /etc/hosts
#   path: /run/scripts/test-script.sh

runcmd:
  # - [ sh, "/run/scripts/test-script.sh" ]
  - sudo sysctl --system
  - sudo  sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward

  # Install containerd
  - curl -LO https://github.com/containerd/containerd/releases/download/v1.7.22/containerd-1.7.22-linux-arm64.tar.gz
  - sudo tar Cxzvf /usr/local containerd-1.7.22-linux-arm64.tar.gz
  - curl -LO https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
  - sudo mkdir -p /usr/local/lib/systemd/system/
  - sudo mv containerd.service /usr/local/lib/systemd/system/
  - sudo mkdir -p /etc/containerd/
  - sudo containerd config default | sudo tee /etc/containerd/config.toml > /dev/null
  - sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
  - sudo systemctl daemon-reload
  - sudo systemctl enable --now containerd

  # Install RUNC
  - curl -LO https://github.com/opencontainers/runc/releases/download/v1.1.14/runc.arm64
  - sudo tar Cxzvf /usr/local containerd-1.7.22-linux-arm64.tar.gz

  # Install CNI
  - curl -LO https://github.com/containernetworking/plugins/releases/download/v1.5.1/cni-plugins-linux-arm-v1.5.1.tgz
  - sudo mkdir -p /opt/cni/bin
  - sudo tar Cxzvf /opt/cni/bin cni-plugins-linux-arm-v1.5.1.tgz
  # Install Kubeadm
  - sudo apt-get update
  - curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  - echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
  - sudo apt-get update
  - sudo apt-get install -y kubelet kubeadm kubectl
  - sudo apt-mark hold kubelet kubeadm kubectl
  #Install CRICRL
  - sudo crictl config runtime-endpoint unix:///var/run/containerd/containerd.sock